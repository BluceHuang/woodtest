// 关联型查询对象类
// 将json格式查询转化为sql语句，json格式需要参考mongo-sql
// by blucehuang 2018-11-20
const mongoSQL = require('mongo-sql');
const { isEmpty } = require('wood-util')();
let indexSupportEnable = false;

class Query {
  constructor(params = {}) {
    this._isQuery = true;
    this.sql = {
      type: 'select',
      table: '',
    };

    for (item in params) {
      if (typeof this[item] === 'function') {
        this[item](params[item]);
      }
    }
  }

  create(table, definition, ifNotExists = true) {
    this.sql.type = 'create-table';
    if (table) this.sql.table = table;
    this.sql.ifNotExists = ifNotExists;
    if (definition) this.sql.definition = definition;
    return this;
  }
  drop(table, cascade = true, ifExists = true) {
    this.sql.type = 'drop-table';
    if (table) this.sql.table = table;
    this.sql.cascade = cascade;
    this.sql.ifExists = ifExists;
    return this;
  }
  alter(table, action = {}) {
    this.sql.type = 'alter-table';
    if (table) this.sql.table = table;
    if (!isEmpty(action)) this.sql.action = action;
    return this;
  }
  select(where = {}, columns = []) {
    this.sql.type = 'select';
    if (where) this.where(where);
    if (columns) this.columns(columns);
    return this;
  }
  insert(values) {
    this.sql.type = 'insert';
    this.values(values);
    return this;
  }
  update(updates = {}, where = {}) {
    this.sql.type = 'update';
    this.update(updates);
    this.where(where);
    return this;
  }
  delete(where = {}) {
    this.sql.type = 'delete';
    this.where(where);
    return this;
  }
  remove(where = {}) {
    this.sql.type = 'remove';
    this.where(where);
    return this;
  }

  static addIndexSupport() {
    mongoSQL.registerQueryType('create-index', 'create {unique} index {name} ON {table} ({fields})');
    mongoSQL.registerQueryType('drop-index', 'drop index {ifExists} {name} ON {table}');
    mongoSQL.registerQueryHelper('unique', function (unique, values, query) {
      return unique ? 'unique' : '';
    });
    mongoSQL.registerQueryHelper('name', function (name, values, query) {
      return require('mongo-sql/lib/utils').quoteObject(name);
    });
    mongoSQL.registerQueryHelper('fields', function (fields, values, query) {
      return fields.map(function (name) { return require('mongo-sql/lib/utils').quoteObject(name); }).join(', ');
    });
    mongoSQL.registerQueryHelper('index', function (index, values, query) {
      var util = require('mongo-sql/lib/utils');
      if (!index || !index.length) {
        return '';
      }
      return index.map(function (index) {
        var rt = ', ';
        if (index.unique) {
          rt += 'unique';
        } else {
          rt += 'key';
        }
        rt += ' ' + util.quoteObject(index.name);
        rt += ' (' + index.fields.map(function (field) { return util.quoteObject(field); }).join(', ') + ')';
        return rt;
      }).join('');
    });
  }

  index(name, fields = {}) {
    if (!indexSupportEnable) {
      Query.addIndexSupport();
      indexSupportEnable = true;
    }
    this.sql.type = 'create-index';
    this.sql.name = name;
    this.sql.fields = fields;
    return this;
  }

  dropIndex(name) {
    if (!indexSupportEnable) {
      Query.addIndexSupport();
      indexSupportEnable = true;
    }
    this.sql.type = 'drop-index';
    this.sql.name = name;
    return this;
  }

  view(name, expression = {}, orReplace = true, temporary = true) {
    this.sql.type = 'create-view';
    this.sql.view = name;
    this.sql.orReplace = orReplace;
    this.sql.temporary = temporary;
    this.expression(expression);
    return this;
  }

  type(params = "select") {
    this.sql.type = params;
  }
  table(params = 'tablename') {
    if (params) this.sql.table = params;
    return this;
  }
  definition(columns = {}) {
    if (!isEmpty(columns)) this.sql.definition = Object.assign(this.sql.definition || {}, columns);
    return this;
  }
  alias(val) {
    if (val) this.sql.alias = val;
    return this;
  }
  expression(params = {}) {
    if (!isEmpty(params)) this.sql.expression = Object.assign(this.sql.expression || {}, params);
    return this;
  }
  values(params) {
    if (!isEmpty(params)) {
      if (Array.isArray(params)) {
        this.sql.values = params;
      } else {
        this.sql.values = Object.assign(this.sql.values || {}, params);
      }
    }
    return this;
  }
  from(tableName = '') {
    if (tableName) this.sql.from = tableName;
    return this;
  }
  join(params = []) {
    if (!isEmpty(params)) this.sql.joins = params;
    return this;
  }
  withs(params = {}) {
    if (!isEmpty(params)) this.sql.withs = Object.assign(this.sql.withs || {}, params);
    return this;
  }
  where(params = {}) {
    if (!isEmpty(params)) this.sql.where = Object.assign(this.sql.where || {}, params);
    return this;
  }
  columns(params = []) {
    if (!isEmpty(params)) this.sql.columns = Object.assign(this.sql.columns || {}, params);
    return this;
  }
  groupBy(params = []) {
    if (!isEmpty(params)) this.sql.groupBy = params;
    return this;
  }
  order(params = []) {
    this.sql.order = params ? params : ['id desc'];
    return this;
  }
  limit(val = 1) {
    if (val) this.sql.limit = val;
    return this;
  }
  // 返回sql语句
  toSQL() {
    let result = mongoSQL.sql(this.sql),
      str = result.toString();
    str = str.replace(/(\$\d+)/g, '?').replace(/"/g, "`").replace('insert', 'replace');
    return [str, result.values];
  }

  static getQuery(req = {}) {
    return new Query(req);
  }
}

module.exports = Query;
