// 数据模型基类
// by bluchhuang 2018-11-23
const {error,catchErr,isEmpty} = require('wood-util')();
const Mysql = require('wood-mysql');
const Sequelize = require('sequelize');
let largelimit = 20000; //限制不能超过2万条数据返回
const _timeout = 0;
const _KeyTimeout = 60 * 1; //设置listkey过期时间，秒

class Model {
  constructor(opts = {}) { 
    this.tableName =opts.tableName;
    this.options = opts.options;
  }

  // 设置getter和setter
  // _get_set() {
  //   let obj = {}, fieldMap = this.fields.fieldMap;
  //   for (let key in fieldMap) {
  //     obj[key] = {
  //       get() {
  //         if (WOOD.config.isDebug) console.warn(`getter: ${key}`);
  //         return fieldMap[key].value || fieldMap[key].defaultValue;
  //       },
  //       set(val) {
  //         if (WOOD.config.isDebug) console.warn(`setter: ${key}, ${val}`);
  //         fieldMap[key].value = val;
  //       }
  //     }
  //   }
  //   return obj;
  // }

  _init() {
    this.model = this.db.define(this.tableName, this.options);
  }

  // 创建索引
  createIndex(name, columns=[], opts = []) {
    if (!isEmpty(opts)) {
      this.db.index(name, columns, opts);
    }
  }

  // 删除索引
  removeIndex(name) {
    if (name) this.db.dropIndex(name);
  }

  // 重置数据
  resetData() {
   
  }

  // 设置数据
  setData(target, value) {
    this.fields.setData(target, value);
    this._hasdata = true;
  }

  // 获取模型数据
  getData(hasVirtualField = true) {
    return this.fields.getData(hasVirtualField);
  }

  // 是否新的
  isNew() {
    return !this.rowid;
  }

  //新增数据
  async create(data = {}, addLock = true, hascheck = true) {
    if (!data) throw error('create方法的参数data不能为空');
    if(!isEmpty(data)) this.setData(data);
    let rowid = await this.redis.rowid();
    if (WOOD.config.isDebug) console.warn('新增rowid: ', rowid);
    if (rowid || data.rowid == 0) {
      this.setData('rowid', rowid);
      let err = hascheck ? this.fields.validate() : false;
      if (err) throw error(err);
      const lock = addLock ? await catchErr(this.redis.lock()) : {data: 1};
      if (lock.data) {
        let result = await catchErr(this.db.create(this.getData()));
        if(addLock) this.redis.unlock(lock.data);
        if(result.err) throw error(result.err);
        return result.data;
      }else{
        throw error(lock.err);
      }
    }
    throw error(false);
  }

  // 更新数据
  async update(data = {}, addLock = true, hascheck = true, isFindOneAndUpdate) {
    if (!data) throw error('update方法的参数data不能为空');
    if(!isEmpty(data)) this.setData(data);
    if (!this.isNew() || data.rowid) {
      let err = hascheck ? this.fields.validate() : false,
        id = this.rowid || data.rowid;
      if (err) {
        throw error(err);
      } else {
        let lock = addLock ? await catchErr(this.redis.lock()) : {data: 1};
        if (lock.data) {
          delete data.rowid;
          let method = isFindOneAndUpdate ? 'findOneAndUpdate' : 'update';
          const result = await catchErr(this.db[method]({ id }, data));
          if(addLock) this.redis.unlock(lock.data);
          if (result.data){
            return isFindOneAndUpdate ? result.data : { rowid: id };
          }else{
            throw error(result.err);
          }
        }else{
          throw error(lock.err);
        }
      }
    }
    throw error(false);
  }
  // 更新数据, 结果返回当前记录
  async findOneAndUpdate(data = {}, addLock = true, hascheck = true) {
    return this.update(data, addLock, hascheck, true);
  }

  // 保存数据
  async save() {
    let data = this.getData(false);
    if (isEmpty(data) || !data) throw error('save方法的data为空');
    if (!this.isNew() || data.rowid) {
      const updateOk = await catchErr(this.update());
      if (updateOk.err) throw error(updateOk.err);
      return updateOk.data;
    } else {
      const result = await catchErr(this.create());
      if (result.err) throw error(result.err);
      return result.data;
    }
  }

  //删除数据
  async remove(data) {
    if (!data) return false;
    const lock = await catchErr(this.redis.lock());
    if (lock.err) {
      throw error(lock.err);
    }else{
      return this.db.remove(data);
    }
  }

  //清空数据
  async clear() {
    const lock = await catchErr(this.redis.lock());
    if (lock.err) {
      throw error(lock.err);
    }else{
      return this.db.clear();
    }
  }

  // 执行查询
  async exec(sql) {
    if (WOOD.config.isDebug) console.warn(`exec ${sql}`);
    let result = await catchErr(this.db.execute(sql));
    if (result.err) {
      throw error(result.err);
    } else {
      return result.data;
    }
  }

  // 条件查询
  async find(data, addLock = true) {
    const hasLock = addLock ? await catchErr(this.redis.hasLock()) : {};
    if(hasLock.err){
      throw error(hasLock.err);
    }else{
      if (!hasLock.data) {
        let result = await catchErr(this.db.find(data));
        if(result.err){
          throw error(result.err);
        }else{
          return Array.isArray(result.data) ? result.data : [result.data];
        }
      } else {
        await new Promise((resolve, reject) => {
          setTimeout(() => {
            resolve(true);
          }, _timeout);
        });
        return this.findOne(data, addLock);
      }
    }
  }

  // 查询单条记录
  async findOne(data, addLock = true) {
    const hasLock = addLock ? await catchErr(this.redis.hasLock()) : {};
    if(hasLock.err){
      throw error(hasLock.err);
    }else{
      if (!hasLock.data) {
        let result = await catchErr(this.db.findOne(data));
        if(result.err){
          throw error(result.err);
        }else{
          return Array.isArray(result.data) ? result.data[0] : result.data;
        }
      } else {
        await new Promise((resolve, reject) => {
          setTimeout(() => {
            resolve(true);
          }, _timeout);
        });
        return this.findOne(data, addLock);
      }
    }
  }

  // 可实现分页查询
  /* @param {object} [params] find condition
   * @param {boolean} [hasCahche] cache result in redis or not
   * @param {string} [keynName] specify key name for cache result
   * @param {number} [opts.limit] per page limit
   * @param {number} [opts.page] current page number
   * @param {number} [opts.largepage] large page number, per large page has largelimit number
  */
  async findList(params = {}, hasCache = true, keyName = '', opts = {}, addLock = true) {
    if (!data) throw error('findList方法参数data不能为空');
    let hasLock = addLock ? await catchErr(this.redis.hasLock()) : {};
    if(hasLock.err){
      throw error(hasLock.err);
    }else{
      if (!hasLock.data) {
        if (hasCache) {
          let listKey = '', hasKey = false, largepage = 1;
          let limit = opts.limit == undefined ? 20 : Number(opts.limit);
          let page = opts.page || 1;
          largepage = opts.largepage || 1;
          page = page % Math.ceil(largelimit / limit) || 1;
          listKey = keyName || this.getListKey(params); //生成listkey
          hasKey = await this.redis.existKey(listKey); //key是否存在 
          if (hasKey) {
            let startIndex = (page - 1) * limit;
            ids = await this.redis.listSlice(listKey, startIndex, startIndex + limit - 1);
            ids = ids.map(item => parseInt(item));      
            let result = await this.db.execute(`select * from ${this.tableName} where id in (${ids})`);
            if (result.err) {
              throw error(result.err);
            } else {
              return result.data;
            }
          }
        }
        
        const docsResult = await this.db.find(params, largelimit);
        if (docsResult.err) {
          throw error(docsResult.err);
        }else{
          let docs = docsResult.data;
          if (hasCache && !hasKey && docs.length) {
            if (docs.length >= largelimit) {
              largepage = largepage || 1;
              let startNum = (largepage - 1) * largelimit;
              docs = docs.slice(startNum, startNum + largelimit);
            }
            await this.redis.listPush(listKey, docs.map(item => item.id));
            this.redis.setKeyTimeout(listKey, _KeyTimeout); //设置listkey一小时后过期
            return {
              count: Number(docsResult.length),
              list: docs || []
            };
          }
        }
      }else{
        await new Promise((resolve, reject) => {
          setTimeout(() => {
            resolve(true);
          }, _timeout);
        });
        return this.findList(data, hasCache, keyName, opts, addLock);
      }
    }
  }
}

module.exports = Model;
