// mysql操作方法类
// by YuRonghui 2018-7-9
const Query = require('wood-querysql');
const mysql = require('mysql2/promise');
const { Util } = require('wood-util')();
const { error, catchErr } = Util;
let dbs = [];

class Mysql {
  constructor(tbName, dbName = 'master') {
    this.tableName = tbName;
    this.dbName = dbName;
    if (dbs[this.dbName]) {
      this.db = dbs[this.dbName];
    } else {
      throw error('mysql failed: db=null');
    }
  }
  // 返回查询对象
  query(tableName) {
    let table = tableName ? tableName : this.tableName;
    return Query.getQuery({ table });
  }
  // 创建数据库连接池
  static async connect(opts, name = 'master') {
    opts.database = name;
    let result = await catchErr(mysql.createConnection(opts));
    if (result.err) {
      console.log(result.err);
    } else {
      dbs[name] = result.data;
      console.log('Mysql connected Successfull');
    }
  }
  // 获取连接
  getConn(database) {
    return dbs[database || this.dbName];
  }

  // 建索引
  async index(data = {}) {
    if (WOOD.config.isDebug) console.warn(`建立索引: ${JSON.stringify(data)}`);
    let table = data.table || this.tableName;
    let columns = data.columns || [];
    let name = data.name || '';
    let opts = data.opts || '';
    let result = await catchErr(this.db.execute(`create ${opts} index ${name} on ${table}(${columns})`));
    if (result.err) {
      console.log(result.err);
    }
  }
  // 查询全部记录
  find(params = {}) {
    if (!params.where) {params = {where:params};}
    let sql = Query.getQuery(params);
    return this.db.execute(sql.toSQL());
  }
  // 查询单条记录
  findOne(params = {}) {
    let data = this._getParams(params);
    return this.collection.findOne(data.where, data.select);
  }
  // 删除
  remove(params = {}) {
    let data = this._getParams(params);
    return this.collection.deleteMany(data.where);
  }
  // 清空
  clear() {
    return this.remove({});
  }
  // 查找并更新
  findOneAndUpdate(params = {}, val = {}) {
    let data = this._getParams(params);
    return this.collection.findOneAndUpdate(data.where, val);
  }
  // 更新
  update(params = {}, val = {}) {
    let data = this._getParams(params);
    return this.collection.updateOne(data.where, val);
  }
  // 新增记录
  create(data = {}) {
    if(Array.isArray(data)){
      return this.collection.insertMany(data);
    }else{
      return this.collection.insertOne(data);
    }
  }
  // 计算总数
  count(params = {}) {
    let data = this._getParams(params);
    return this.collection.find(data.where).count();
  }

  // 创建表
  createTable() {
    const { fields, tableName } = this.options;
    if (global.tables[tableName]) return;
    for (let key in fields) {
      if (fields[key].type === 'datetime') {
        fields[key].default = `'${fields[key].default}'`;
      }
    }
    let sql = this.query(),
      [sqlStr, values] = sql.create(tableName, fields).toSQL(),
      fieldsArr = Object.values(fields);
    fieldsArr.forEach(item => {
      let length = item.length;
      if (length !== undefined) {
        sqlStr = sqlStr.replace(/\s+(int|char|varchar|float)\s+/, ` $1(${Array.isArray(length) ? length.join(',') : length}) `);
      }
    });
    sqlStr += ' default charset=utf8;'
    this.getConn().execute(sqlStr);
    global.tables[tableName] = true;
  }
  // 清除表
  dropTable() {
    this.getConn().execute(`drop table if exists \`${this.options.tableName}\`;`);
  }
  // 获取SQL
  _getQuery(sql) {
    if (sql._isQuery) {
      return sql.toSQL();
    } else {
      return sql;
    }
  }
  // 执行操作
  async execute(sql) {
    const result = await catchErr(this.db.execute(...sql));
    if (result.err) {
      throw error(result.err);
    } else {
      return result.data[0];
    }
  }
}

module.exports = Mysql;
